name: CI/CD - Flask App on EKS
 
on:
  push:
    branches:
      - main
    paths:
      - 'infra/**'
      - 'bootstrap/**'
      - 'app/**'
      - 'helm/**'
      - '.github/workflows/**'

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: flask-app-repo
  CLUSTER_NAME: eks-cluster
  ECR_URL: 557690607676.dkr.ecr.us-east-2.amazonaws.com

jobs:
  deploy:
    name: Deploy Full Infrastructure & App
    runs-on: ubuntu-latest

    steps:
      # Checkout source code
      - name: Checkout code
        uses: actions/checkout@v3

      # AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      ##############################################
      # Step 1: Create S3 + DynamoDB for backend
      ##############################################
      - name: Terraform Init for S3 & DynamoDB
        working-directory: flask-app/infra/bootstrap
        run: terraform init

      - name: Terraform Apply S3 & DynamoDB
        working-directory: flask-app/infra/bootstrap
        run: terraform apply -auto-approve

      ##############################################
      # Step 2: Provision infrastructure (EKS, ECR)
      ##############################################
      - name: Terraform Init with backend
        working-directory: flask-app/infra
        run: terraform init -reconfigure

      - name: Terraform Plan
        working-directory: flask-app/infra
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: flask-app/infra
        run: terraform apply -auto-approve tfplan

      ##############################################
      # Step 3: Build & Push Docker image to ECR
      ##############################################
      - name: Login to Amazon ECR
        run: aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_URL

      - name: Build Docker image
        working-directory: flask-app/app
        run: docker build -t $ECR_URL/$ECR_REPOSITORY:latest .

      - name: Push Docker image
        run: docker push $ECR_URL/$ECR_REPOSITORY:latest

      ##############################################
      # Step 4: Deploy Flask app using Helm
      ##############################################
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: v1.29.0

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.13.0

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME

      - name: Helm Deploy
        run: |
          helm upgrade --install flask-app flask-app/helm/flask-app \
            --set image.repository=$ECR_URL/$ECR_REPOSITORY \
            --set image.tag=latest \
            --set service.type=LoadBalancer
