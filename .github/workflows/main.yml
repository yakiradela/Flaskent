name: CI/CD - Flask App on EKS

on:
  push:
    branches:
      - main
    paths:
      - 'infra/**'
      - 'bootstrap/**'
      - 'app/**'
      - 'helm/**'
      - '.github/workflows/**'

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: flask-app-repo
  CLUSTER_NAME: eks-cluster
  ECR_URL: 557690607676.dkr.ecr.us-east-2.amazonaws.com

jobs:
  deploy:
    name: Deploy Infrastructure and App
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0


      ####################################################################
      # שלב 1: יצירת ה-backend (S3 bucket + DynamoDB)
      ####################################################################
      - name: Terraform Apply for Backend (S3 + DynamoDB)
        working-directory: flask-app/infra/bootstrap
        run: terraform apply -auto-approve

      ####################################################################
      # שלב 2: יצירת תשתית EKS, Node Groups, ECR וכו'
      ####################################################################
      - name: Init Terraform (Infra)
        working-directory: flask-app/infra
        run: terraform init -reconfigure

      - name: Terraform Plan (Infra)
        working-directory: flask-app/infra
        run: terraform plan -out=tfplan

      - name: Terraform Apply (Infra)
        working-directory: flask-app/infra
        run: terraform apply -auto-approve tfplan

      ####################################################################
      # שלב 3: Build & Push של Docker image ל-ECR
      ####################################################################
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_URL

      - name: Build Docker image
        working-directory: flask-app/app
        run: docker build -t $ECR_URL/$ECR_REPOSITORY:latest .

      - name: Push Docker image
        run: docker push $ECR_URL/$ECR_REPOSITORY:latest

      ####################################################################
      # שלב 4: Deploy של האפליקציה ל-EKS עם Helm
      ####################################################################
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/v1.29.0/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME

      - name: Deploy with Helm
        run: |
          helm upgrade --install flask-app flask-app/helm/flask-app \
            --set image.repository=$ECR_URL/$ECR_REPOSITORY \
            --set image.tag=latest \
            --set service.type=LoadBalancer
